introspection: http://puripuri000.sirclo.me.dmmy.me/graphql
servers:
  - url: http://puripuri000.sirclo.me.dmmy.me/graphql
    description: Test Server  
info:
  description: |
    Welcome to the sample Pokémon API reference. This is a live example of how you can use [DociQL](https://github.com/wayfair/dociql) in conjunction with [GraphQL](https://graphql.org/) to generate beautiful static documentation for your own APIs.

    The Pokémon API is GraphQL API. It's schema can be fetched using introspection query and can be used for generating code, documentations, tests etc.

    GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data. GraphQL provides a complete and understandable description of the data in your API, gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time, and enables powerful developer tools.
  version: 1.0.0
  title: Pokémon API
  termsOfService: 'http://puripuri000.sirclo.me.dmmy.me/graphql'
  contact:
    email: irna@sirclo.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
domains:
  - name: Fetching Tenant information
    description: Base methods to fetch pokemon information.
    usecases:
    - name: Fetch tenant 123
      description: Query tenant information with given id
      query: query.tenant
# securityDefinitions:
#   cheesy_auth:
#     type: oauth2
#     authorizationUrl: 'http://cheesy.sourcey.com/api/oauth/dialog'
#     description: Provides OAuth access to the cheese
#     flow: implicit
#     scopes:
#       'write:cheeses': Modify cheeses in your account
#       'read:cheeses': Read your cheeses
#   api_key:
#     type: apiKey
#     name: api_key
#     description: Provides API Key access to the cheese
#     in: header
# externalDocs:
#   description: Find out more about Swagger
#   url: 'http://swagger.io'
